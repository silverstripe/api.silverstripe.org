{% from _self import element %}

{% macro add_class_methods_index(class, prettyJsonOptions) %}
    {% if class.methods %}
        {% set from_link = class_path(class) %}
        {% for meth in class.methods %}
            {{-
                {
                    type: 'Method'|trans,
                    fromName: class.name,
                    fromLink: from_link,
                    link: method_path(meth),
                    name: meth.__toString(),
                    doc: meth.shortdesc|desc(class),
                }|json_encode(prettyJsonOptions)|raw
            -}},
        {% endfor %}
    {% endif %}
{% endmacro %}

(function(i,s,o,g,r,a,m){ i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
 })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-84547-17', 'auto', { 'allowLinker': true });
ga('require', 'linker');
ga('linker:autoLink', [
    'www.silverstripe.com',
    'www.silverstripe.org',
    'addons.silverstripe.org',
    'api.silverstripe.org',
    'docs.silverstripe.org',
    'userhelp.silverstripe.org',
    'demo.silverstripe.org'
]);
ga('send', 'pageview');

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '{{ element(tree, project.config('default_opened_level'), 0)|replace({"'": "\\'", "\n": ''})|spaceless|raw }}';

    var searchTypeClasses = {
        '{{ 'Namespace'|trans|escape('js') }}': 'label-default',
        '{{ 'Class'|trans|escape('js') }}': 'label-info',
        '{{ 'Interface'|trans|escape('js') }}': 'label-primary',
        '{{ 'Trait'|trans|escape('js') }}': 'label-success',
        '{{ 'Method'|trans|escape('js') }}': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
        {% from _self import add_class_methods_index %}
        {% set prettyJsonOptions = constant('JSON_UNESCAPED_SLASHES') b-or constant('JSON_UNESCAPED_UNICODE') %}
        {% for ns in namespaces -%}
            {{-
                {
                    type: 'Namespace'|trans,
                    link: namespace_path(ns),
                    name: ns,
                    doc: 'Namespace %s'|format(ns),
                }|json_encode(prettyJsonOptions)|raw
            -}},
        {%- endfor %}
        {% for class in interfaces -%}
            {% set interface = {
                        type: 'Interface'|trans,
                        link: class_path(class),
                        name: class.name,
                        doc: class.shortdesc|desc(class),
            } %}
            {% if class.namespace %}
                {% set interface = {
                        type: interface.type,
                        fromName: class.namespace,
                        fromLink: namespace_path(class.namespace),
                        link: interface.link,
                        name: interface.name,
                        doc: interface.doc,
                } %}
             {% endif %}
            {{-
                interface|json_encode(prettyJsonOptions)|raw
            -}},
            {{ add_class_methods_index(class, prettyJsonOptions) }}
        {% endfor %}
        {% for class in classes -%}
            {% set classOrTrait = {
                        type: class.isTrait ? 'Trait'|trans : 'Class'|trans,
                        link: class_path(class),
                        name: class.name,
                        doc: class.shortdesc|desc(class),
            } %}
            {% if class.namespace %}
                {% set classOrTrait = {
                        type: classOrTrait.type,
                        fromName: class.namespace,
                        fromLink: namespace_path(class.namespace),
                        link: classOrTrait.link,
                        name: classOrTrait.name,
                        doc: classOrTrait.doc,
                } %}
            {% endif %}
            {{-
                classOrTrait|json_encode(prettyJsonOptions)|raw
            -}},
            {{ add_class_methods_index(class, prettyJsonOptions) }}
        {% endfor %}
        {# Override this block, search_index_extra, to add custom search entries! #}
        {% block search_index_extra '' %}
        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Doctum = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
search: function(term) {
            var searchField =  $('#search-form .tt-input');
            var rankByType = function (type) {
                switch (type) {
                    case 'Class':
                    case 'Trait':
                    case 'Interface':
                        return 1;
                    case 'Namespace':
                        return 2;
                    case 'Method':
                    default:
                        return 3;
                }
            }
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    sorter: function(a, b) {
                        // not sure how to get the search term in a nicer way than this
                        var term = searchField.val() || Doctum.cleanSearchTerm();

                        var lowerTerm = term.toLowerCase();

                        var matcher = function (a, b, aObj, bObj, ignoreEnds) {

                            // always prioritise by type - this stops methods polluting the results
                            var aPriority = rankByType(aObj.type);
                            var bPriority = rankByType(bObj.type);

                            if (aPriority > bPriority) {
                                return 1;
                            }
                            if (aPriority < bPriority) {
                                return -1
                            }

                            // normalise terms
                            a = a.toLowerCase();
                            b = b.toLowerCase();

                            if (a !== b) {
                                // prefer exact match
                                if (lowerTerm == a) {
                                    return -1;
                                }
                                if (lowerTerm == b) {
                                    return 1;
                                }
                            }

                            // if they match equally well, rank on type
                            if (a == b || (!ignoreEnds && (a.endsWith(lowerTerm) && b.endsWith(lowerTerm)) || (a.startsWith(lowerTerm) && b.startsWith(lowerTerm)))) {

                                // if they match on type, they should sort alphabetically
                                if (aPriority == bPriority) {
                                    // alphabetically
                                    if (a == b) {
                                        return 0;
                                    }
                                    if (a > b) {
                                        return 1;
                                    } else {
                                        return -1;
                                    }
                                }
                                // sort by type
                                if (aPriority > bPriority) {
                                    return 1
                                } else {
                                    return -1;
                                }
                            }

                            // allow skipping of matching begins and ends of stings (useful when sorting the FQNS)
                            if (ignoreEnds) {
                                return null;
                            }

                            // if strings start with the search term, prefer them
                            if (a.startsWith(lowerTerm)) {
                                return -1;
                            }

                            if (b.startsWith(lowerTerm)) {
                                return 1;
                            }

                            // if strings end with the search term, prefer them
                            if (a.endsWith(lowerTerm)) {
                                return -1;
                            }

                            if (b.endsWith(lowerTerm)) {
                                return 1;
                            }
                        }

                        var match = null;

                        // try to match against the FQNS
                        match = matcher(a.name, b.name, a, b, true);
                        if (typeof match === 'number') {
                            return match;
                        }

                        var splitter = function(item) {
                            var parts = item.name.split('\\');
                            if (item.type == 'Method') {
                                var methodParts = parts.pop().split('::');
                                parts = parts.concat(methodParts);
                            }
                            return parts;
                        }

                        //split at namespace separator
                        var aParts = splitter(a);
                        var bParts = splitter(b);

                        // go through each part of the FQNS and compare from the end
                        do {
                            var aPart = aParts.pop();
                            var bPart = bParts.pop();

                            match = matcher(aPart, bPart, a, b);
                            if (typeof match === 'number') {
                                return match;
                            }

                        } while (aParts.length && bParts.length);

                        return 0;
                    }
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Doctum.injectApiTree($('#api-tree'));
    });

    return root.Doctum;
})(window);

$(function() {

    {% if project.versions|length > 1 %}
    // Enable the version switcher
    $('#version-switcher').on('change', function() {
        var currentLocation = window.location.pathname.substring(2);
        window.location = '/' + $(this).data('version') + currentLocation;
    });
    var versionSwitcher = document.getElementById('version-switcher');
    if (versionSwitcher) {
        var versionToSelect = document.evaluate(
            '//option[@data-version="{{ project.version|escape('js') }}"]',
            versionSwitcher,
            null,
            XPathResult.FIRST_ORDERED_NODE_TYPE,
            null
        ).singleNodeValue;

        if (versionToSelect && typeof versionToSelect.selected === 'boolean') {
            versionToSelect.selected = true;
        }
    }
    {% endif %}

    {% block treejs %}

        // Toggle left-nav divs on click
        $('#api-tree .hd span').on('click', function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    {% endblock %}

    {% verbatim %}
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Doctum.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    {% endverbatim %}
});


{% macro element(tree, opened, depth) %}
    {% from _self import element %}

    <ul>
        {%- for element in tree -%}
            {%- if element[2] -%}
                <li data-name="namespace:{{ element[1]|replace({'\\': '_'})|raw }}" {% if depth < opened %}class="opened"{% endif %}>
                    <div style="padding-left:{{ (depth * 18)|raw }}px" class="hd">
                        <span class="icon icon-play"></span>
                        <a href="{{ namespace_path(element[1]) }}">{{ element[0]|raw }}</a>
                    </div>
                    <div class="bd">
                        {{ element(element[2], opened, depth + 1) -}}
                    </div>
                </li>
            {%- else -%}
                <li data-name="class:{{ element[1]|replace({'\\': '_'}) }}" {% if depth < opened %}class="opened"{% endif %}>
                    <div style="padding-left:{{ 8 + (depth * 18) }}px" class="hd leaf">
                        <a href="{{ class_path(element[1]) }}">{{ element[0] }}</a>
                    </div>
                </li>
            {%- endif -%}
        {%- endfor %}
    </ul>
{% endmacro %}
